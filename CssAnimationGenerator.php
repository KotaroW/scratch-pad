<?php
/**********************************************************************
* file: CssAnimationGenerator.php
* date: 11 June, 2015
* version: Beta
* description:
*		this file contains a PHP class that creates CSS @Keyframe rules
*		and css animation properties. Vendour-specific prefixes are handled together with 
*		the none-prefix version in order to accommodate the modern browsers.
**********************************************************************/


class CssAnimationGenerator {
	/* vendour-specific prefixes */
	/* the last elements is non-prefix version of Keyframes */
	private $prefixes = array ( '-moz-', '-ms-', '-o-', '-webkit-', '' );

	private $animation_name;
	private $css_property;
	private $css_property_prefix_needed;		// bool
	private $start_value;
	private $end_value;
	private $animation_duration;		// must be %d+s or %d+ms (e.g. 1s / 1000ms )
	private $animation_delay;			// must be %d+s or %d+ms
	private $animation_iteration_count;
	private $animation_timing_function;
	private $animation_fill_mode;

	private $keyframes;						// @Keyframes rule -> this will be generated by the constructor
	private $animations;						// Css animation property -> this will be generated by the constructor

	public function __construct ( $name, $property, $prefix_needed, $start, $end, $duration, $iteration = 1, $delay = 0, $timing_function = 'ease-in-out', $fill_mode = 'forwards' ) {
		$this->animation_name					= $name;
		$this->css_property							= $property;
		$this->css_property_prefix_needed	= $prefix_needed;
		$this->start_value								= $start;
		$this->end_value								= $end;
		$this->animation_duration				= $duration;
		$this->animation_delay					= $delay;
		$this->animation_iteration_count	= $iteration;
		$this->animation_timing_function	= $timing_function;
		$this->animation_fill_mode			= $fill_mode;

		$this->makeKeyframes ();
		$this->makeAnimations ();
	}
	private function makeKeyframes () {
		$this->keyframes = '';
		foreach ( $this->prefixes as $prefix ) {
			$this->keyframes .= "\t@" . $prefix . 'keyframes ' . $this->animation_name . " {\n";
			$this->keyframes .= "\t\t0% { " . ( $this->css_property_prefix_needed ? $prefix : '' ) . $this->css_property . ': ' . $this->start_value . "; }\n";
			$this->keyframes .= "\t\t100% { " . ( $this->css_property_prefix_needed ? $prefix : '' ) . $this->css_property . ': ' . $this->end_value . "; }\n";
			$this->keyframes .= "\t}\n";
		}
	}
	private function makeAnimations () {
		$this->animations = '';
		foreach ( $this->prefixes as $prefix ) {
			$this->animations .= "\t\t" . $prefix . "animation-name: $this->animation_name;\n";
			$this->animations .= "\t\t" . $prefix . "animation-duration: $this->animation_duration;\n";
			$this->animations .= "\t\t" . $prefix . "animation-delay: $this->animation_delay;\n";
			$this->animations .= "\t\t" . $prefix . "animation-timing-function: $this->animation_timing_function;\n";
			$this->animations .= "\t\t" . $prefix . "animation-iteration-count: $this->animation_iteration_count;\n";
			$this->animations .= "\t\t" . $prefix . "animation-fill-mode: $this->animation_fill_mode;\n";
		}
	}
	public function getKeyframes () {
		return $this->keyframes;
	}
	public function getAnimations () {
		return $this->animations;
	}
}
?>
